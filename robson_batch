#need the fastq files
#this one uses the Trainset16_022016.rdp.tgz
#Uses the Silva.nr_v132.tgz
#batch 1
make.file(inputdir=., type=fastq, prefix=robson_lorentz_thesis)
make.contigs(file=robson_lorentz_thesis.files, processors=20)
summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.fasta)
screen.seqs(fasta=robson_lorentz_thesis.trim.contigs.fasta, group=robson_lorentz_thesis.contigs.groups, maxambig=0, maxlength=312)
summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.fasta)
unique.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.fasta)
count.seqs(name=robson_lorentz_thesis.trim.contigs.good.names, group=robson_lorentz_thesis.contigs.good.groups)
summary.seqs(count=robson_lorentz_thesis.trim.contigs.good.count_table)
pcr.seqs(fasta=silva.bacteria.fasta, oligos=oligos.txt)
rename.file(input=silva.bacteria.fasta, new=silva.v4.fasta)
summary.seqs(fasta=silva.v4.fasta)
align.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.fasta, reference=silva.v4.fasta)
summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.align, count=robson_lorentz_thesis.trim.contigs.good.count_table)

#batch 2
screen.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.align, count=robson_lorentz_thesis.trim.contigs.good.count_table, summary=robson_lorentz_thesis.trim.contigs.good.unique.summary, start=11895 ,end=25318 ,maxhomop=8)
#summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.align, count=robson_lorentz_thesis.trim.contigs.good.count_table)
filter.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.align, vertical=T, trump=.)
#summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.fasta, count=robson_lorentz_thesis.trim.contigs.good.count_table)
unique.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.fasta, count=robson_lorentz_thesis.trim.contigs.good.count_table)
pre.cluster(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.count_table, diffs=2)
chimera.vsearch(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)
remove.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)
summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table)
classify.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=trainset16_022016.pds.fasta, taxonomy=trainset16_022016.pds.tax, cutoff=80)
remove.lineage(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
count.groups(count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table)
sub.sample(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, taxonomy=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, size=15923, persample=true)
count.groups(count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.subsample.count_table)
summary.seqs(fasta=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.subsample.fasta, count=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.subsample.count_table)
#end of preprocessing
rename.file(input=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.subsample.fasta, new=robson_lorentz_thesis.final.subs.fasta)
rename.file(input=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.subsample.count_table, new=robson_lorentz_thesis.final.subs.count_table)
rename.file(input=robson_lorentz_thesis.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.subsample.taxonomy, new=robson_lorentz_thesis.final.subs.taxonomy)
summary.tax(taxonomy=robson_lorentz_thesis.final.subs.taxonomy, count=robson_lorentz_thesis.final.subs.count_table)
cluster.split(fasta=robson_lorentz_thesis.final.subs.fasta, count=robson_lorentz_thesis.final.subs.count_table, taxonomy=robson_lorentz_thesis.final.subs.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03)
classify.otu(list=robson_lorentz_thesis.final.subs.opti_mcc.list, count=robson_lorentz_thesis.final.subs.count_table, taxonomy=robson_lorentz_thesis.final.subs.taxonomy, label=0.03)
make.shared(list=robson_lorentz_thesis.final.subs.opti_mcc.list, count=robson_lorentz_thesis.final.subs.count_table, label=0.03)
summary.single(shared=robson_lorentz_thesis.final.subs.opti_mcc.shared, calc=nseqs-coverage-sobs-shannon)
dist.shared(shared=robson_lorentz_thesis.final.subs.opti_mcc.shared, calc=braycurtis-thetayc)
pcoa(phylip=robson_lorentz_thesis.final.subs.opti_mcc.braycurtis.0.03.lt.dist)
pcoa(phylip=robson_lorentz_thesis.final.subs.opti_mcc.thetayc.0.03.lt.dist)
nmds(phylip=robson_lorentz_thesis.final.subs.opti_mcc.braycurtis.0.03.lt.dist)
nmds(phylip=robson_lorentz_thesis.final.subs.opti_mcc.thetayc.0.03.lt.dist)
amova(phylip=robson_lorentz_thesis.final.subs.opti_mcc.braycurtis.0.03.lt.dist, design=design_robson)
metastats(shared=robson_lorentz_thesis.final.subs.opti_mcc.shared, design=design_robson)

